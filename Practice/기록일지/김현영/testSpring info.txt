 

 

= 페이지 간의 이동 

] 

Forward -   url -> url  페이지 간의 이동 

 

다음 페이지 단으로 이동하지만 기본 적으로 URL은 변동되지 않는다 [Contrainer 내부에서의 페이지 이동] 

내부 이동이기 때문에 동일 web container 단으로만 이동이 가능하다. 

이동간에 여러 데이터들을 정의하여 넘길 수 있다.   

-> p1 ( forward 하는 페이지 ) 와 p2 ( forward 받는 페이지 ) 는 		 request / response 객체를 통하여 데이터를 공유 한다. 

     -   forward는 RequestDispatcher 를 통해 서버에서 요청 범위 내에서 처리 

    foward = 넘겨주기 , 기존 페이지의 서비스의 연장선 

 

 

 

Redirect – url -> client -> url 

    -   redirect 는 서버가 기존 이벤트를 처리하던 url과 별개로 새로운 페이지 주소로 이동시키며 request를 던진다. Forwad는 어떤 한 이벤트가 연속적으로 진행되가는 형식이라면 redirect는 기존 이벤트와의 완전히 별개의 것. 

그렇기에 최초에 redirect를 던진 URL 과 이후 서버로부터 request를 받은 URL은 서로 데이터, 객체 공유가 존재하지 않는다. 

SendRedirect 이후 새로운 request / response 객체가 생성됨. 

 

 

 

 

 

 

Spring 맛보기 

 

Spring framework : Java flatform  , open source framwork -> spring 

 

Dynamic web site 개발에 활용되는 프레임워크 

 

 

 

대략적인 진행 순서 

Request(요청발생)->DispatcherServlet(어 요청?)handelr에게 전송) 

-> HandlerMapping (해당 요청을 처리할 controller 탐색) ->  

(우리가 아는 그 패툰으로 진행) 

 Controller -> Service -> DAO -> DB  -> 

 DAO -> Service -> Controller(요청 결과 내보내기) 

 

-> DispatcherServlet(최종결과 발신) ->  

ViewResolver(최종결과를 표시할 view 탐색) ->View(내가 바로 그 뷰)  -> Response(client 에게 전달) 

 

MVC Model 패툰이 Spring Framwork에도 그대로 사용된다. 

Request 에서 DispatcherServlet으로 넘어가는 경우 web.xml 에 servlet 정보를 기입하면 요청을 가로채게 된다. 

 

 

 

특징1 

 - 각각의 객체 생성, 소멸과 같은 생명주기를 관리하며 스프링으로부터 필요한 객체를 얻어올 수 있다. 

  

특징2  

제어 역행( Inversion of Control) 뭐 라는건지 모르겠다. 

 - 컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어 필요에 따라 스프링에서 사용자의 코드를 호출한다. 

  

특징 3 

의존성 주입(Dependency Injection) 

 - 각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다. [ 기능 수행 시 (서비스 제공 시) 특정 객체가 필요하게 될 경우 내부에서 새로 생성하는 것이 아닌 외부로부터 받아와서 사용하는 방식 ]  

 

특징 4 

③ 관점지향 프로그래밍(AOP : Aspect-Oriented Programming) 

 - 트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다. 

 - OOP(객체 지향 프로그램)에서 필연적으로 발생되는 코드 중복을 보완하기 위하여 고안된 프로그래밍 방식이다. 

 - 해당 용어에서의 Aspect[관점]이란 : 객체지향 프로그래밍의 경우 공통 기능을 담은 클래스나 메소드가 프로젝트의 여러 곳에서 호출, 정의를 하며 공통기능을 사용하는 각 메소드들 중복된 코드를 가지게 된다.  

이렇게 중복이 발생하는 영역을 아예 따로 분리하고 각 메소드는 각각 고유의 기능 만을 들고 있도록 만드는 것. 

 

-> 객체 지향 프로그래밍 구조 상 필연적으로 생기게 되는 중복 코드를 줄이기 위하여 고안된 방식이라고 한다. ?????  

추상적 구현된 클래스의 모듈화. ?????? 설명도 추상적이다. 

Error 처리, Transaction 등 메소드를 더욱 정밀하게 조정하는데 이용된다고 한다. 

 

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  

AOP 연관 키워드- 

Filter : Servlet 단계에서 작업을 수행하는 정제제. 

 DispatcherServlet 실행 이전에 기능을 수행하며 말그대로 필터역할, 여러 환경, 인코딩 등을 체크하고 변경시키는 역할. 

[ init()  시작 - doFilter() 수행 -> destory() 사망 ] 

 

Interceptor,: 단어 뜻대로 요청을 낚아채서 자신이 처리하는 객체. 

DispatcherServlet 수행 이전, 이후에 관여하여 Context 나 Controller 등을 통한 요청 처리를 수행한다. 다중으로 사용 가능하며 Spring에 존재하는 모든 비어있는 객체 까지도 접근할 수 있다. 

 

[ preHandler() 핸들러 호출 즉 컨트롤러 호출 이전 -> postHandler() 핸들러 호출 후 -> aftercompletion() 페이지 처리 이후 ] 

 

 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  

 

 

 

④ 애플리케이션 객체의 생명 주기와 설정을 포함하고 관리한다는 점에서 일종의 "컨테이너"(Container)라고 할 수 있다. 

 - iBatis, myBatis나 Hibernate 등 완성도가 높은 데이터베이스처리 라이브러리와 연결할 수 있는 인터페이스를 제공한다. 

  

⑤ 트랜잭션 관리 프레임워크 

 - 추상화된 트랜잭션 관리를 지원하며 설정파일(xml, java, property 등)을 이용한 선언적인 방식 및 프로그래밍을 통한 방식을 모두 지원한다. 

 
 

⑥ 모델-뷰-컨트롤러 패턴 

 - 웹 프로그램밍 개발 시 거의 표준적인 방식인 "Spring MVC"라 불리는 모델-뷰-컨트롤러(MVC) 패턴을 사용한다.  

 -  DispatcherServlet이 Controller 역할을 담당하여 각종 요청을 적절한 서비스에 분산시켜주며 이를 각 서비스들이 처리를 하여 결과를 생성하고 그 결과는 다양한 형식의 View 서비스들로 화면에 표시될 수 있다. 

 
 

⑦ 배치 프레임워크 

 - 스프링은 특정 시간대에 실행하거나 대용량의 자료를 처리하는데 쓰이는 일괄 처리(Batch Processing)을 지원하는 배치 프레임워크를 제공한다. 기본적으로 스프링 배치는 Quartz 기반으로 동작한다. 

 
 

 

 

 

 

 